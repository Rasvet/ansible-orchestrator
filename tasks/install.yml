---

- name: Install archives directory
  ansible.builtin.file:
    dest: "{{ install_archives }}"
    mode: '0755'
    state: directory

- name: Include version-specific variables for Debian/Ubuntu.
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_os_family == 'Debian'
- name: Include version-specific variables for RedHat
  ansible.builtin.include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat"

- name: Import debian
  ansible.builtin.import_tasks: debian.yml
  when: ansible_os_family == 'Debian'

- name: Import redhat
  ansible.builtin.import_tasks: redhat.yml
  when: ansible_os_family == "RedHat"

- name: Pip
  when: orchestrator_pip is defined and orchestrator_pip != []
  block:
    - name: Import python-externally-managed
      ansible.builtin.import_tasks: python-externally-managed.yml
    - name: Install orchestrator pip modules
      ansible.builtin.pip:
        name: "{{ orchestrator_pip }}"
        state: present
        executable: "{{ orchestrator_bin_pip | default('pip3') }}"
      register: pkg_result
      until: pkg_result is success

- name: Gem
  when: orchestrator_gem is defined and orchestrator_gem != []
  block:
    - name: Ensure ruby is installed
      ansible.builtin.package:
        name: "{{ ruby_pkg }}"
        state: "present"
      register: pkg_result
      until: pkg_result is success
    - name: Install orchestrator gem modules
      community.general.gem:
        name: "{{ item }}"
        state: "present"
      with_items: "{{ orchestrator_gem }}"
      register: pkg_result
      until: pkg_result is success

- name: Vagrant
  when: orchestrator_vagrant is defined and orchestrator_vagrant
  block:
    - name: Check existing vagrant plugins
      ansible.builtin.command: "vagrant plugin list"
      register: plugins
      changed_when: false
    - name: Install
      when: plugins.stdout.find("digitalocean") == -1
      block:
        - name: Install vagrant plugins
          ansible.builtin.command: "vagrant plugin install {{ item }}"
          args:
            creates: "{{ ansible_env.HOME }}/.vagrant/plugins/path/TBD/{{ item }}"
          with_items: "{{ orchestrator_vagrant_plugins }}"
