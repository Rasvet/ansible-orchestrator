---

- name: install archives directory
  file: dest="{{ install_archives }}" mode=0755 state=directory

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- include: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: redhat.yml
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- block:
    - name: install orchestrator pip modules
      pip: name={{ item }} state=present
      with_items: "{{ orchestrator_pip }}"
  when: orchestrator_pip is defined and orchestrator_pip != []

- block:
    - name: ensure ruby is installed
      package: name={{ item }} state=present
      with_items:
        - ruby
        - ruby-dev
    - name: install orchestrator gem modules
      gem: name={{ item }} state=present
      with_items: "{{ orchestrator_gem }}"
  when: orchestrator_gem is defined and orchestrator_gem != []

- block:
    - name: check existing vagrant plugins
      command: "vagrant plugin list"
      register: plugins
      changed_when: false
    - block:
        - name: install vagrant plugins
          command: "vagrant plugin install {{ item }}"
          with_items: "{{ orchestrator_vagrant_plugins }}"
      when: plugins.stdout.find("digitalocean") == -1
  when: orchestrator_vagrant is defined and orchestrator_vagrant

- block:
    - name: recover github ansible roles
      git: repo={{ item.url }} dest={{ item.p }}
      with_items: "{{ orchestrator_github_roles }}"
  when: orchestrator_github_roles is defined and orchestrator_github_roles != []

- block:
    - name: recover galaxy ansible roles
      command: "ansible-galaxy install {{ item.n }} -p {{ item.p }}"
      with_items: "{{ orchestrator_galaxy_roles }}"
  when: orchestrator_galaxy_roles is defined and orchestrator_galaxy_roles != []

